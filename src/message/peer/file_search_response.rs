use crate::message::{Message, MessageHandler};
use crate::peer::PeerOperation;
use std::collections::HashMap;
use std::sync::mpsc::Sender;

#[derive(Debug)]
pub struct File {
    pub username: String,
    pub name: String,
    pub size: i32,
    pub attribs: HashMap<i32, i32>,
}
#[derive(Debug)]
pub struct FileSearch {
    pub current_token: String,
    pub files: Vec<File>,
    pub slots: i8,
    pub speed: i32,
}
impl FileSearch {
    pub fn new_from_message(message: &mut Message) {
        let username = message.read_string();
        println!("username: {:?}", username);
        let current_token = message.read_raw_hex_str(4);
        let n_files = message.read_int32();
        let mut files: Vec<File> = Vec::new();
        for _ in 0..n_files {
            message.read_int8();
            let name = message.read_string();
            let size = message.read_int32();
            message.read_int32();
            message.read_string();
            let n_attribs = message.read_int32();
            let mut attribs: HashMap<i32, i32> = HashMap::new();

            for _ in 0..n_attribs {
                attribs.insert(message.read_int32(), message.read_int32());
            }
            files.push(File {
                username: username.clone(),
                name,
                size,
                attribs,
            });
        }
        let slots = message.read_int8();
        let speed = message.read_int32();

        Self {
            current_token,
            files,
            slots,
            speed,
        };
    }
}
pub struct FileSearchResponse;
impl MessageHandler<PeerOperation> for FileSearchResponse {
    fn get_code(&self) -> u8 {
        9
    }
    fn handle(&self, message: &mut Message, sender: Sender<PeerOperation>) {
        println!("{:?}", message);
        // let file_search = FileSearch::new_from_message(message);

        // sender.send(ServerOperation::ConnectToPeer(peer)).unwrap();
    }
}

#[test]
fn test_new_from_message() {
    let data: Vec<u8> = [
        99, 4, 0, 0, 9, 0, 0, 0, 120, 156, 205, 150, 207, 143, 219, 84, 16, 199, 29, 10, 109, 5,
        18, 42, 90, 1, 226, 130, 230, 132, 18, 32, 81, 236, 164, 249, 33, 113, 136, 227, 132, 77,
        104, 178, 142, 226, 116, 203, 106, 189, 149, 76, 252, 54, 121, 187, 182, 95, 120, 118, 216,
        13, 23, 42, 33, 164, 30, 57, 244, 86, 132, 16, 72, 28, 16, 61, 33, 64, 72, 8, 56, 149, 11,
        255, 3, 18, 85, 165, 30, 56, 149, 35, 32, 152, 231, 252, 216, 100, 147, 108, 87, 93, 22,
        136, 228, 120, 215, 121, 126, 223, 207, 204, 124, 61, 158, 243, 146, 36, 181, 212, 102, 67,
        95, 203, 100, 220, 151, 110, 164, 241, 95, 41, 114, 235, 222, 147, 210, 149, 136, 20, 126,
        158, 21, 23, 174, 227, 87, 161, 192, 120, 215, 115, 204, 70, 83, 95, 109, 234, 218, 37, 83,
        227, 196, 247, 169, 109, 153, 90, 179, 108, 24, 213, 146, 106, 42, 73, 89, 129, 56, 180,
        186, 4, 214, 9, 15, 104, 135, 193, 6, 177, 184, 15, 170, 23, 116, 153, 195, 58, 3, 144,
        243, 153, 124, 92, 206, 103, 101, 216, 44, 107, 181, 178, 6, 138, 146, 74, 231, 182, 76,
        173, 4, 138, 153, 76, 37, 192, 232, 187, 46, 225, 112, 133, 144, 93, 226, 217, 192, 182,
        193, 130, 26, 221, 38, 1, 117, 73, 98, 219, 177, 218, 31, 126, 113, 113, 132, 38, 73, 103,
        4, 28, 30, 63, 225, 241, 40, 30, 165, 207, 37, 233, 49, 60, 95, 88, 10, 253, 26, 9, 186,
        156, 65, 171, 239, 56, 166, 86, 169, 106, 151, 202, 107, 96, 84, 84, 17, 78, 151, 182, 81,
        18, 140, 174, 213, 222, 29, 69, 161, 49, 183, 231, 144, 128, 64, 209, 233, 19, 168, 48, 78,
        223, 102, 184, 66, 196, 205, 60, 31, 161, 21, 51, 42, 167, 99, 176, 57, 115, 243, 214, 132,
        190, 198, 222, 26, 66, 127, 252, 201, 217, 57, 232, 119, 23, 65, 123, 139, 160, 141, 0,
        119, 229, 212, 238, 16, 211, 104, 33, 107, 179, 90, 90, 45, 199, 33, 107, 26, 204, 197,
        120, 168, 215, 129, 87, 25, 15, 137, 71, 202, 83, 183, 96, 40, 75, 151, 37, 218, 125, 178,
        115, 78, 154, 249, 68, 216, 191, 139, 32, 210, 115, 231, 220, 87, 43, 135, 211, 179, 241,
        196, 127, 159, 30, 180, 236, 202, 133, 67, 233, 209, 255, 33, 132, 54, 122, 131, 155, 201,
        196, 78, 175, 211, 248, 230, 252, 105, 106, 200, 66, 227, 236, 115, 43, 167, 169, 161, 8,
        141, 107, 245, 167, 79, 83, 35, 37, 52, 220, 199, 159, 63, 77, 141, 180, 208, 248, 229,
        211, 167, 102, 53, 242, 139, 52, 90, 149, 50, 212, 245, 245, 178, 137, 61, 45, 23, 110, 85,
        199, 45, 204, 100, 14, 45, 53, 109, 238, 187, 191, 126, 55, 217, 105, 108, 238, 221, 69,
        207, 254, 230, 145, 42, 98, 115, 220, 185, 68, 156, 254, 62, 129, 178, 77, 3, 236, 65, 120,
        65, 209, 74, 162, 123, 202, 102, 50, 125, 32, 12, 155, 117, 230, 49, 209, 133, 69, 167,
        218, 10, 57, 110, 191, 18, 204, 113, 184, 139, 56, 106, 39, 225, 192, 46, 158, 61, 148,
        128, 194, 213, 159, 231, 132, 247, 22, 9, 191, 249, 64, 225, 177, 186, 77, 253, 54, 235,
        112, 171, 215, 29, 128, 219, 75, 153, 50, 24, 65, 223, 166, 12, 84, 231, 141, 190, 235, 15,
        75, 18, 15, 11, 2, 81, 50, 98, 148, 243, 121, 37, 54, 147, 166, 4, 222, 251, 98, 180, 56,
        161, 123, 100, 116, 46, 68, 134, 148, 142, 160, 250, 241, 161, 169, 148, 49, 85, 147, 184,
        150, 31, 16, 78, 236, 133, 128, 152, 58, 176, 135, 249, 36, 251, 61, 203, 179, 113, 29, 63,
        184, 101, 204, 175, 36, 147, 217, 88, 88, 107, 136, 226, 171, 168, 67, 61, 203, 1, 87, 212,
        121, 180, 34, 118, 164, 7, 144, 232, 247, 219, 203, 99, 21, 86, 136, 124, 249, 191, 139,
        85, 129, 168, 71, 246, 32, 252, 121, 58, 208, 236, 108, 21, 159, 185, 85, 89, 26, 153, 240,
        90, 228, 218, 67, 71, 150, 10, 199, 0, 234, 88, 66, 217, 135, 23, 112, 28, 193, 197, 104,
        38, 121, 52, 37, 20, 137, 31, 128, 190, 61, 105, 1, 98, 200, 201, 197, 179, 73, 83, 206,
        204, 66, 94, 255, 161, 176, 20, 114, 71, 64, 118, 143, 132, 156, 236, 63, 204, 165, 75,
        188, 192, 199, 191, 83, 201, 160, 139, 19, 150, 135, 84, 220, 183, 248, 96, 106, 218, 138,
        11, 207, 103, 49, 141, 242, 124, 91, 186, 243, 217, 183, 199, 107, 75, 254, 66, 168, 144,
        133, 217, 131, 112, 52, 242, 77, 181, 166, 106, 112, 248, 162, 62, 54, 233, 196, 8, 185,
        28, 14, 120, 28, 106, 22, 212, 197, 203, 239, 34, 84, 176, 172, 34, 191, 196, 135, 96, 234,
        197, 235, 166, 173, 27, 171, 247, 35, 135, 147, 245, 199, 153, 33, 231, 95, 130, 235, 163,
        227, 112, 53, 89, 7, 167, 201, 98, 223, 243, 194, 100, 100, 242, 120, 106, 80, 210, 38,
        162, 96, 117, 138, 79, 73, 84, 165, 220, 181, 40, 66, 242, 118, 23, 115, 40, 174, 82, 168,
        53, 64, 152, 47, 41, 167, 98, 163, 17, 239, 96, 167, 45, 80, 39, 207, 24, 245, 160, 142,
        38, 230, 214, 62, 181, 112, 235, 34, 243, 250, 62, 180, 56, 190, 125, 194, 36, 123, 87,
        239, 207, 205, 125, 189, 200, 130, 36, 127, 125, 156, 96, 134, 78, 208, 75, 27, 80, 172,
        93, 46, 27, 162, 11, 87, 13, 13, 23, 171, 141, 202, 134, 89, 212, 95, 7, 163, 220, 50, 196,
        24, 158, 30, 89, 179, 193, 156, 129, 141, 47, 186, 225, 24, 142, 249, 207, 196, 69, 23,
        132, 168, 209, 239, 97, 52, 179, 77, 60, 246, 50, 100, 176, 137, 135, 85, 138, 207, 214,
        41, 49, 93, 168, 233, 9, 9, 93, 125, 243, 183, 15, 150, 186, 90, 124, 69, 222, 57, 121,
        108, 122, 179, 186, 90, 93, 83, 107, 96, 180, 46, 151, 170, 250, 131, 25, 131, 89, 198,
        239, 7, 203, 25, 67, 51, 189, 119, 114, 198, 245, 234, 218, 70, 45, 222, 172, 54, 230, 233,
        32, 186, 78, 189, 129, 19, 231, 180, 23, 91, 148, 205, 189, 3, 210, 187, 239, 223, 92, 74,
        250, 39, 30, 127, 3, 4, 86, 176, 208,
    ]
    .to_vec();
    let mut message = Message::new_with_data(data);
    message.set_pointer(12);

    let file_search = FileSearch::new_from_message(&mut message);
    println!("{:?}", file_search);
}
